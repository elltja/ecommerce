generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum UserRole {
    USER
    ADMIN

    @@map("user_role")
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime? @map("email_verified")
    image           String?
    role            UserRole  @default(USER)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    accounts        Account[]
    sessions        Session[]
    createdProducts Product[]
    orders          Order[]   @relation("CustomerOrders")
    reviews         Review[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Product {
    id           String   @id @default(cuid())
    title        String
    description  String
    slug         String   @unique
    priceInCents Int      @map("price_in_cents")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    createdById  String   @map("created_by_id")

    createdBy  User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
    images     ProductImage[]
    orderItems OrderItem[]
    reviews    Review[]

    @@map("products")
}

model ProductImage {
    id        String  @id @default(cuid())
    url       String
    altText   String?
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    position  Int     @default(0)

    @@map("product_images")
}

enum OrderStatus {
    PLACED
    SHIPPED
    COMPLETED

    @@map("order_status")
}

model Order {
    id                 String      @id @default(cuid())
    customerEmail      String      @map("customer_email")
    customerId         String?     @map("user_id")
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    status             OrderStatus @default(PLACED)
    totalAmountInCents Int         @map("total_amount_in_cents")
    paymentIntentId    String?     @map("payment_intent_id")
    shippingAddress    Json        @map("shipping_address")

    items    OrderItem[]
    customer User?       @relation("CustomerOrders", fields: [customerId], references: [id])
}

model OrderItem {
    id        String  @id @default(cuid())
    quantity  Int
    productId String  @map("product_id")
    orderId   String? @map("order_id")

    product Product @relation(fields: [productId], references: [id])
    order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
    id        String   @id @default(cuid())
    text      String
    rating    Int
    createdAt DateTime @default(now()) @map("created_at")
    userId    String   @map("user_id")
    productId String   @map("product_id")

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
